[
{
 "methods": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "superclassType": {
  "typeName": "IOException",
  "dimension": "",
  "simpleTypeName": "IOException",
  "qualifiedTypeName": "java.io.IOException",
  "toString": "java.io.IOException"
 },
 "commentText": "Contains info related to the javadoc process that failed.",
 "seeTags": [],
 "name": "ProcessException",
 "qualifiedTypeName": "com.surfapi.proc.ProcessException",
 "interfaces": [],
 "modifiers": "public",
 "containingClass": null,
 "fields": [],
 "tags": [],
 "typeParameters": [],
 "simpleTypeName": "ProcessException",
 "qualifiedName": "com.surfapi.proc.ProcessException",
 "innerClasses": [],
 "constructors": [
  {
   "firstSentenceTags": [
    {
     "text": "CTOR.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessException",
   "name": "ProcessException",
   "flatSignature": "(ProcessHelper)",
   "parameters": [
    {
     "toString": "com.surfapi.proc.ProcessHelper processHelper"
    }
   ],
   "modifiers": "public",
   "metaType": "constructor",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [
    {
     "text": "CTOR.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessException",
   "name": "ProcessException",
   "flatSignature": "(Process, String, List<String>, List<String>)",
   "parameters": [
    {
     "toString": "Process p"
    },
    {
     "toString": "String description"
    },
    {
     "toString": "java.util.List<java.lang.String> stdout"
    },
    {
     "toString": "java.util.List<java.lang.String> stderr"
    }
   ],
   "modifiers": "public",
   "metaType": "constructor",
   "thrownExceptionTypes": []
  }
 ],
 "metaType": "class",
 "typeName": "ProcessException",
 "firstSentenceTags": [
  {
   "text": "Contains info related to the javadoc process that failed.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "interfaceTypes": [],
 "dimension": "",
 "typeParamTags": [],
 "superclass": {
  "firstSentenceTags": [],
  "qualifiedName": "java.io.IOException",
  "name": "IOException",
  "modifiers": "public",
  "metaType": "class"
 },
 "enumConstants": [],
 "modifierSpecifier": 1,
 "toString": "com.surfapi.proc.ProcessException",
 "annotations": [],
 "rawCommentText": " Contains info related to the javadoc process that failed.\n",
 "inlineTags": [
  {
   "text": "Contains info related to the javadoc process that failed.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessException",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "isSynthetic": false,
 "metaType": "constructor",
 "thrownExceptionTypes": [],
 "commentText": "CTOR.",
 "firstSentenceTags": [
  {
   "text": "CTOR.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "ProcessException",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "com.surfapi.proc.ProcessHelper",
   "name": "processHelper",
   "toString": "com.surfapi.proc.ProcessHelper processHelper",
   "annotations": [],
   "type": {
    "typeName": "ProcessHelper",
    "dimension": "",
    "simpleTypeName": "ProcessHelper",
    "qualifiedTypeName": "com.surfapi.proc.ProcessHelper",
    "toString": "com.surfapi.proc.ProcessHelper"
   }
  }
 ],
 "flatSignature": "(ProcessHelper)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "Contains info related to the javadoc process that failed.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessException",
  "name": "ProcessException",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " CTOR.\n",
 "signature": "(com.surfapi.proc.ProcessHelper)",
 "inlineTags": [
  {
   "text": "CTOR.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessException",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "isSynthetic": false,
 "metaType": "constructor",
 "thrownExceptionTypes": [],
 "commentText": "CTOR.",
 "firstSentenceTags": [
  {
   "text": "CTOR.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "ProcessException",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "Process",
   "name": "p",
   "toString": "Process p",
   "annotations": [],
   "type": {
    "typeName": "Process",
    "dimension": "",
    "simpleTypeName": "Process",
    "qualifiedTypeName": "java.lang.Process",
    "toString": "java.lang.Process"
   }
  },
  {
   "typeName": "String",
   "name": "description",
   "toString": "String description",
   "annotations": [],
   "type": {
    "typeName": "String",
    "dimension": "",
    "simpleTypeName": "String",
    "qualifiedTypeName": "java.lang.String",
    "toString": "java.lang.String"
   }
  },
  {
   "typeName": "java.util.List<java.lang.String>",
   "name": "stdout",
   "toString": "java.util.List<java.lang.String> stdout",
   "annotations": [],
   "type": {
    "typeName": "List",
    "dimension": "",
    "simpleTypeName": "List",
    "qualifiedTypeName": "java.util.List",
    "toString": "java.util.List<java.lang.String>"
   }
  },
  {
   "typeName": "java.util.List<java.lang.String>",
   "name": "stderr",
   "toString": "java.util.List<java.lang.String> stderr",
   "annotations": [],
   "type": {
    "typeName": "List",
    "dimension": "",
    "simpleTypeName": "List",
    "qualifiedTypeName": "java.util.List",
    "toString": "java.util.List<java.lang.String>"
   }
  }
 ],
 "flatSignature": "(Process, String, List<String>, List<String>)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "Contains info related to the javadoc process that failed.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessException",
  "name": "ProcessException",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " CTOR.\n",
 "signature": "(java.lang.Process, java.lang.String, java.util.List<java.lang.String>, java.util.List<java.lang.String>)",
 "inlineTags": [
  {
   "text": "CTOR.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "methods": [
  {
   "firstSentenceTags": [
    {
     "text": "Add an output observer.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.addObserver",
   "name": "addObserver",
   "flatSignature": "(ProcessHelper.Stream, Observer)",
   "parameters": [
    {
     "toString": "ProcessHelper.Stream stream"
    },
    {
     "toString": "Observer observer"
    }
   ],
   "modifiers": "public",
   "returnType": {
    "typeName": "T",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [
    {
     "text": "Set the description",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.setDescription",
   "name": "setDescription",
   "flatSignature": "(String)",
   "parameters": [
    {
     "toString": "String description"
    }
   ],
   "modifiers": "public",
   "returnType": {
    "typeName": "T",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.getDescription",
   "name": "getDescription",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "String",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [
    {
     "text": "Redirect to the given output stream",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.pipeTo",
   "name": "pipeTo",
   "flatSignature": "(ProcessHelper.Stream, OutputStream)",
   "parameters": [
    {
     "toString": "ProcessHelper.Stream stream"
    },
    {
     "toString": "OutputStream outputStream"
    }
   ],
   "modifiers": "public",
   "returnType": {
    "typeName": "T",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.getExecutorService",
   "name": "getExecutorService",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "protected",
   "returnType": {
    "typeName": "ExecutorService",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.shutdownExecutor",
   "name": "shutdownExecutor",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "protected",
   "returnType": {
    "typeName": "T",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [
    {
     "text": "Spawn threads (via the ExecutorService) to read stdout\/stderr of the process.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.spawnStreamReaders",
   "name": "spawnStreamReaders",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "T",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [
    {
     "text": "Start separate threads for reading stdout\/stderr of the Process, \n then call process.waitFor.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.waitFor",
   "name": "waitFor",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "T",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": [
    {
     "typeName": "InterruptedException",
     "dimension": "",
     "simpleTypeName": "InterruptedException",
     "qualifiedTypeName": "java.lang.InterruptedException",
     "toString": "java.lang.InterruptedException"
    }
   ]
  },
  {
   "firstSentenceTags": [
    {
     "text": "Destroy the process (via process.destroy()), then wait for it to terminate.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.destroyAndWaitFor",
   "name": "destroyAndWaitFor",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "T",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": [
    {
     "typeName": "InterruptedException",
     "dimension": "",
     "simpleTypeName": "InterruptedException",
     "qualifiedTypeName": "java.lang.InterruptedException",
     "toString": "java.lang.InterruptedException"
    }
   ]
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.getStdout",
   "name": "getStdout",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "List",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": [
    {
     "typeName": "ExecutionException",
     "dimension": "",
     "simpleTypeName": "ExecutionException",
     "qualifiedTypeName": "java.util.concurrent.ExecutionException",
     "toString": "java.util.concurrent.ExecutionException"
    },
    {
     "typeName": "InterruptedException",
     "dimension": "",
     "simpleTypeName": "InterruptedException",
     "qualifiedTypeName": "java.lang.InterruptedException",
     "toString": "java.lang.InterruptedException"
    }
   ]
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.getStderr",
   "name": "getStderr",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "List",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": [
    {
     "typeName": "ExecutionException",
     "dimension": "",
     "simpleTypeName": "ExecutionException",
     "qualifiedTypeName": "java.util.concurrent.ExecutionException",
     "toString": "java.util.concurrent.ExecutionException"
    },
    {
     "typeName": "InterruptedException",
     "dimension": "",
     "simpleTypeName": "InterruptedException",
     "qualifiedTypeName": "java.lang.InterruptedException",
     "toString": "java.lang.InterruptedException"
    }
   ]
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.getOutput",
   "name": "getOutput",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "List",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": [
    {
     "typeName": "ExecutionException",
     "dimension": "",
     "simpleTypeName": "ExecutionException",
     "qualifiedTypeName": "java.util.concurrent.ExecutionException",
     "toString": "java.util.concurrent.ExecutionException"
    },
    {
     "typeName": "InterruptedException",
     "dimension": "",
     "simpleTypeName": "InterruptedException",
     "qualifiedTypeName": "java.lang.InterruptedException",
     "toString": "java.lang.InterruptedException"
    }
   ]
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.getStdoutNow",
   "name": "getStdoutNow",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "List",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.getStderrNow",
   "name": "getStderrNow",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "List",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.exitValue",
   "name": "exitValue",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "int",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.getProcess",
   "name": "getProcess",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "Process",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.loadStreamUnchecked",
   "name": "loadStreamUnchecked",
   "flatSignature": "(ProcessHelper.Stream, InputStream)",
   "parameters": [
    {
     "toString": "ProcessHelper.Stream stream"
    },
    {
     "toString": "InputStream is"
    }
   ],
   "modifiers": "protected",
   "returnType": {
    "typeName": "List",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [
    {
     "text": "Read the contents of the given inputstream.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.loadStream",
   "name": "loadStream",
   "flatSignature": "(ProcessHelper.Stream, InputStream)",
   "parameters": [
    {
     "toString": "ProcessHelper.Stream stream"
    },
    {
     "toString": "InputStream is"
    }
   ],
   "modifiers": "protected",
   "returnType": {
    "typeName": "List",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": [
    {
     "typeName": "IOException",
     "dimension": "",
     "simpleTypeName": "IOException",
     "qualifiedTypeName": "java.io.IOException",
     "toString": "java.io.IOException"
    }
   ]
  },
  {
   "firstSentenceTags": [
    {
     "text": "Notify output observers when a new line of output is read from the process's\n stdout or stderr streams.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.notifyObservers",
   "name": "notifyObservers",
   "flatSignature": "(ProcessHelper.Stream, String)",
   "parameters": [
    {
     "toString": "ProcessHelper.Stream stream"
    },
    {
     "toString": "String line"
    }
   ],
   "modifiers": "protected",
   "returnType": {
    "typeName": "void",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  }
 ],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "superclassType": {
  "typeName": "Object",
  "dimension": "",
  "simpleTypeName": "Object",
  "qualifiedTypeName": "java.lang.Object",
  "toString": "java.lang.Object"
 },
 "commentText": "A little wrapper around a forked Process.  It sets up separate threads\n to read stdout\/stderr from the Process, to avoid hanging the Process.\n \n When you fork a process from Java it sets up pipes between the Java process\n and the forked process for stdout\/stderr.  The pipes have a limited buffer\n capacity and if this capacity is reached, then the forked process may hang\n waiting for the Java process to read some data off the pipe.  That's why \n you need separate threads reading the stdout\/stderr pipes from the Java\n side while another thread calls, e.g, Process.waitFor.",
 "seeTags": [],
 "name": "ProcessHelper",
 "qualifiedTypeName": "com.surfapi.proc.ProcessHelper",
 "interfaces": [],
 "modifiers": "public",
 "containingClass": null,
 "fields": [],
 "tags": [],
 "typeParameters": [
  {
   "bounds": [
    {
     "typeName": "ProcessHelper",
     "dimension": "",
     "simpleTypeName": "ProcessHelper",
     "qualifiedTypeName": "com.surfapi.proc.ProcessHelper",
     "toString": "com.surfapi.proc.ProcessHelper"
    }
   ],
   "typeName": "T",
   "dimension": "",
   "simpleTypeName": "T",
   "qualifiedTypeName": "T",
   "toString": "T extends com.surfapi.proc.ProcessHelper"
  }
 ],
 "simpleTypeName": "ProcessHelper",
 "qualifiedName": "com.surfapi.proc.ProcessHelper",
 "innerClasses": [
  {
   "firstSentenceTags": [
    {
     "text": "Output stream identifier",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream",
   "name": "ProcessHelper.Stream",
   "modifiers": "public static final",
   "metaType": "enum"
  }
 ],
 "constructors": [
  {
   "firstSentenceTags": [
    {
     "text": "CTOR.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper",
   "name": "ProcessHelper",
   "flatSignature": "(Process)",
   "parameters": [
    {
     "toString": "Process process"
    }
   ],
   "modifiers": "public",
   "metaType": "constructor",
   "thrownExceptionTypes": []
  }
 ],
 "metaType": "class",
 "typeName": "ProcessHelper",
 "firstSentenceTags": [
  {
   "text": "A little wrapper around a forked Process.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "interfaceTypes": [],
 "dimension": "",
 "typeParamTags": [],
 "superclass": {
  "firstSentenceTags": [],
  "qualifiedName": "java.lang.Object",
  "name": "Object",
  "modifiers": "public",
  "metaType": "class"
 },
 "enumConstants": [],
 "modifierSpecifier": 1,
 "toString": "com.surfapi.proc.ProcessHelper<T extends com.surfapi.proc.ProcessHelper>",
 "annotations": [],
 "rawCommentText": " A little wrapper around a forked Process.  It sets up separate threads\n to read stdout\/stderr from the Process, to avoid hanging the Process.\n \n When you fork a process from Java it sets up pipes between the Java process\n and the forked process for stdout\/stderr.  The pipes have a limited buffer\n capacity and if this capacity is reached, then the forked process may hang\n waiting for the Java process to read some data off the pipe.  That's why \n you need separate threads reading the stdout\/stderr pipes from the Java\n side while another thread calls, e.g, Process.waitFor.\n \n",
 "inlineTags": [
  {
   "text": "A little wrapper around a forked Process.  It sets up separate threads\n to read stdout\/stderr from the Process, to avoid hanging the Process.\n \n When you fork a process from Java it sets up pipes between the Java process\n and the forked process for stdout\/stderr.  The pipes have a limited buffer\n capacity and if this capacity is reached, then the forked process may hang\n waiting for the Java process to read some data off the pipe.  That's why \n you need separate threads reading the stdout\/stderr pipes from the Java\n side while another thread calls, e.g, Process.waitFor.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.addObserver",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "T",
  "dimension": "",
  "simpleTypeName": "T",
  "qualifiedTypeName": "T",
  "toString": "T extends com.surfapi.proc.ProcessHelper"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "Add an output observer.\n \n Note: observers should be added *BEFORE* calling spawnStreamReaders.",
 "firstSentenceTags": [
  {
   "text": "Add an output observer.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "addObserver",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "ProcessHelper.Stream",
   "name": "stream",
   "toString": "ProcessHelper.Stream stream",
   "annotations": [],
   "type": {
    "typeName": "ProcessHelper.Stream",
    "dimension": "",
    "simpleTypeName": "Stream",
    "qualifiedTypeName": "com.surfapi.proc.ProcessHelper.Stream",
    "toString": "com.surfapi.proc.ProcessHelper.Stream"
   }
  },
  {
   "typeName": "Observer",
   "name": "observer",
   "toString": "Observer observer",
   "annotations": [],
   "type": {
    "typeName": "Observer",
    "dimension": "",
    "simpleTypeName": "Observer",
    "qualifiedTypeName": "java.util.Observer",
    "toString": "java.util.Observer"
   }
  }
 ],
 "flatSignature": "(ProcessHelper.Stream, Observer)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " Add an output observer.\n \n Note: observers should be added *BEFORE* calling spawnStreamReaders.\n",
 "signature": "(com.surfapi.proc.ProcessHelper.Stream, java.util.Observer)",
 "inlineTags": [
  {
   "text": "Add an output observer.\n \n Note: observers should be added *BEFORE* calling spawnStreamReaders.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [
  {
   "text": "this",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.setDescription",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "T",
  "dimension": "",
  "simpleTypeName": "T",
  "qualifiedTypeName": "T",
  "toString": "T extends com.surfapi.proc.ProcessHelper"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "Set the description",
 "firstSentenceTags": [
  {
   "text": "Set the description",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "setDescription",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "String",
   "name": "description",
   "toString": "String description",
   "annotations": [],
   "type": {
    "typeName": "String",
    "dimension": "",
    "simpleTypeName": "String",
    "qualifiedTypeName": "java.lang.String",
    "toString": "java.lang.String"
   }
  }
 ],
 "flatSignature": "(String)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " Set the description\n \n @return this\n",
 "signature": "(java.lang.String)",
 "inlineTags": [
  {
   "text": "Set the description",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [
  {
   "text": "process description",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.getDescription",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "String",
  "dimension": "",
  "simpleTypeName": "String",
  "qualifiedTypeName": "java.lang.String",
  "toString": "java.lang.String"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "getDescription",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " @return process description\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.pipeTo",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "T",
  "dimension": "",
  "simpleTypeName": "T",
  "qualifiedTypeName": "T",
  "toString": "T extends com.surfapi.proc.ProcessHelper"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "Redirect to the given output stream",
 "firstSentenceTags": [
  {
   "text": "Redirect to the given output stream",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "pipeTo",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "ProcessHelper.Stream",
   "name": "stream",
   "toString": "ProcessHelper.Stream stream",
   "annotations": [],
   "type": {
    "typeName": "ProcessHelper.Stream",
    "dimension": "",
    "simpleTypeName": "Stream",
    "qualifiedTypeName": "com.surfapi.proc.ProcessHelper.Stream",
    "toString": "com.surfapi.proc.ProcessHelper.Stream"
   }
  },
  {
   "typeName": "OutputStream",
   "name": "outputStream",
   "toString": "OutputStream outputStream",
   "annotations": [],
   "type": {
    "typeName": "OutputStream",
    "dimension": "",
    "simpleTypeName": "OutputStream",
    "qualifiedTypeName": "java.io.OutputStream",
    "toString": "java.io.OutputStream"
   }
  }
 ],
 "flatSignature": "(ProcessHelper.Stream, OutputStream)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " Redirect to the given output stream\n",
 "signature": "(com.surfapi.proc.ProcessHelper.Stream, java.io.OutputStream)",
 "inlineTags": [
  {
   "text": "Redirect to the given output stream",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [
  {
   "text": "the executorService, for spawning threads to read stdout\/stderr.",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.getExecutorService",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "ExecutorService",
  "dimension": "",
  "simpleTypeName": "ExecutorService",
  "qualifiedTypeName": "java.util.concurrent.ExecutorService",
  "toString": "java.util.concurrent.ExecutorService"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "getExecutorService",
 "modifierSpecifier": 4,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "protected",
 "thrownExceptions": [],
 "rawCommentText": " @return the executorService, for spawning threads to read stdout\/stderr.\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "this",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.shutdownExecutor",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "T",
  "dimension": "",
  "simpleTypeName": "T",
  "qualifiedTypeName": "T",
  "toString": "T extends com.surfapi.proc.ProcessHelper"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "shutdownExecutor",
 "modifierSpecifier": 4,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "protected",
 "thrownExceptions": [],
 "rawCommentText": " @return this\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "this",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.spawnStreamReaders",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "T",
  "dimension": "",
  "simpleTypeName": "T",
  "qualifiedTypeName": "T",
  "toString": "T extends com.surfapi.proc.ProcessHelper"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "Spawn threads (via the ExecutorService) to read stdout\/stderr of the process.",
 "firstSentenceTags": [
  {
   "text": "Spawn threads (via the ExecutorService) to read stdout\/stderr of the process.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "spawnStreamReaders",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " Spawn threads (via the ExecutorService) to read stdout\/stderr of the process.\n \n @return this\n",
 "signature": "()",
 "inlineTags": [
  {
   "text": "Spawn threads (via the ExecutorService) to read stdout\/stderr of the process.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [
  {
   "text": "this",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.waitFor",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "T",
  "dimension": "",
  "simpleTypeName": "T",
  "qualifiedTypeName": "T",
  "toString": "T extends com.surfapi.proc.ProcessHelper"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [
  {
   "typeName": "InterruptedException",
   "dimension": "",
   "simpleTypeName": "InterruptedException",
   "qualifiedTypeName": "java.lang.InterruptedException",
   "toString": "java.lang.InterruptedException"
  }
 ],
 "commentText": "Start separate threads for reading stdout\/stderr of the Process, \n then call process.waitFor.",
 "firstSentenceTags": [
  {
   "text": "Start separate threads for reading stdout\/stderr of the Process, \n then call process.waitFor.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "waitFor",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.lang.InterruptedException",
   "name": "InterruptedException",
   "modifiers": "public",
   "metaType": "class"
  }
 ],
 "rawCommentText": " Start separate threads for reading stdout\/stderr of the Process, \n then call process.waitFor.\n \n @return this\n",
 "signature": "()",
 "inlineTags": [
  {
   "text": "Start separate threads for reading stdout\/stderr of the Process, \n then call process.waitFor.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [
  {
   "text": "this",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.destroyAndWaitFor",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "T",
  "dimension": "",
  "simpleTypeName": "T",
  "qualifiedTypeName": "T",
  "toString": "T extends com.surfapi.proc.ProcessHelper"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [
  {
   "typeName": "InterruptedException",
   "dimension": "",
   "simpleTypeName": "InterruptedException",
   "qualifiedTypeName": "java.lang.InterruptedException",
   "toString": "java.lang.InterruptedException"
  }
 ],
 "commentText": "Destroy the process (via process.destroy()), then wait for it to terminate.",
 "firstSentenceTags": [
  {
   "text": "Destroy the process (via process.destroy()), then wait for it to terminate.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "destroyAndWaitFor",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.lang.InterruptedException",
   "name": "InterruptedException",
   "modifiers": "public",
   "metaType": "class"
  }
 ],
 "rawCommentText": " Destroy the process (via process.destroy()), then wait for it to terminate.\n \n @return this\n",
 "signature": "()",
 "inlineTags": [
  {
   "text": "Destroy the process (via process.destroy()), then wait for it to terminate.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [
  {
   "text": "stdout data",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.getStdout",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "List",
  "dimension": "",
  "simpleTypeName": "List",
  "qualifiedTypeName": "java.util.List",
  "toString": "java.util.List<java.lang.String>"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [
  {
   "typeName": "ExecutionException",
   "dimension": "",
   "simpleTypeName": "ExecutionException",
   "qualifiedTypeName": "java.util.concurrent.ExecutionException",
   "toString": "java.util.concurrent.ExecutionException"
  },
  {
   "typeName": "InterruptedException",
   "dimension": "",
   "simpleTypeName": "InterruptedException",
   "qualifiedTypeName": "java.lang.InterruptedException",
   "toString": "java.lang.InterruptedException"
  }
 ],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "getStdout",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.util.concurrent.ExecutionException",
   "name": "ExecutionException",
   "modifiers": "public",
   "metaType": "class"
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.lang.InterruptedException",
   "name": "InterruptedException",
   "modifiers": "public",
   "metaType": "class"
  }
 ],
 "rawCommentText": " @return stdout data\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "stderr data",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.getStderr",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "List",
  "dimension": "",
  "simpleTypeName": "List",
  "qualifiedTypeName": "java.util.List",
  "toString": "java.util.List<java.lang.String>"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [
  {
   "typeName": "ExecutionException",
   "dimension": "",
   "simpleTypeName": "ExecutionException",
   "qualifiedTypeName": "java.util.concurrent.ExecutionException",
   "toString": "java.util.concurrent.ExecutionException"
  },
  {
   "typeName": "InterruptedException",
   "dimension": "",
   "simpleTypeName": "InterruptedException",
   "qualifiedTypeName": "java.lang.InterruptedException",
   "toString": "java.lang.InterruptedException"
  }
 ],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "getStderr",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.util.concurrent.ExecutionException",
   "name": "ExecutionException",
   "modifiers": "public",
   "metaType": "class"
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.lang.InterruptedException",
   "name": "InterruptedException",
   "modifiers": "public",
   "metaType": "class"
  }
 ],
 "rawCommentText": " @return stderr data\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "all output, stdout followed by stderr",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.getOutput",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "List",
  "dimension": "",
  "simpleTypeName": "List",
  "qualifiedTypeName": "java.util.List",
  "toString": "java.util.List<java.lang.String>"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [
  {
   "typeName": "ExecutionException",
   "dimension": "",
   "simpleTypeName": "ExecutionException",
   "qualifiedTypeName": "java.util.concurrent.ExecutionException",
   "toString": "java.util.concurrent.ExecutionException"
  },
  {
   "typeName": "InterruptedException",
   "dimension": "",
   "simpleTypeName": "InterruptedException",
   "qualifiedTypeName": "java.lang.InterruptedException",
   "toString": "java.lang.InterruptedException"
  }
 ],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "getOutput",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.util.concurrent.ExecutionException",
   "name": "ExecutionException",
   "modifiers": "public",
   "metaType": "class"
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.lang.InterruptedException",
   "name": "InterruptedException",
   "modifiers": "public",
   "metaType": "class"
  }
 ],
 "rawCommentText": " @return all output, stdout followed by stderr\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "stdout data, without waiting. If an exception occurs then the exception message is returned.",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.getStdoutNow",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "List",
  "dimension": "",
  "simpleTypeName": "List",
  "qualifiedTypeName": "java.util.List",
  "toString": "java.util.List<java.lang.String>"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "getStdoutNow",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " @return stdout data, without waiting. If an exception occurs then the exception message is returned.\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "stderr data, without waiting. If an exception occurs then the exception message is returned.",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.getStderrNow",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "List",
  "dimension": "",
  "simpleTypeName": "List",
  "qualifiedTypeName": "java.util.List",
  "toString": "java.util.List<java.lang.String>"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "getStderrNow",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " @return stderr data, without waiting. If an exception occurs then the exception message is returned.\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "process.exitValue.",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.exitValue",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "int",
  "dimension": "",
  "simpleTypeName": "int",
  "qualifiedTypeName": "int",
  "toString": "int"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "exitValue",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " @return process.exitValue.\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "the wrapped process object",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.getProcess",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "Process",
  "dimension": "",
  "simpleTypeName": "Process",
  "qualifiedTypeName": "java.lang.Process",
  "toString": "java.lang.Process"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "getProcess",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " @return the wrapped process object\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "The contents of the InputStream",
   "name": "@return",
   "kind": "@return"
  },
  {
   "text": "RuntimeException if an IOException occurs.",
   "name": "@throws",
   "kind": "@throws"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.loadStreamUnchecked",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "List",
  "dimension": "",
  "simpleTypeName": "List",
  "qualifiedTypeName": "java.util.List",
  "toString": "java.util.List<java.lang.String>"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "loadStreamUnchecked",
 "modifierSpecifier": 4,
 "parameters": [
  {
   "typeName": "ProcessHelper.Stream",
   "name": "stream",
   "toString": "ProcessHelper.Stream stream",
   "annotations": [],
   "type": {
    "typeName": "ProcessHelper.Stream",
    "dimension": "",
    "simpleTypeName": "Stream",
    "qualifiedTypeName": "com.surfapi.proc.ProcessHelper.Stream",
    "toString": "com.surfapi.proc.ProcessHelper.Stream"
   }
  },
  {
   "typeName": "InputStream",
   "name": "is",
   "toString": "InputStream is",
   "annotations": [],
   "type": {
    "typeName": "InputStream",
    "dimension": "",
    "simpleTypeName": "InputStream",
    "qualifiedTypeName": "java.io.InputStream",
    "toString": "java.io.InputStream"
   }
  }
 ],
 "flatSignature": "(ProcessHelper.Stream, InputStream)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "protected",
 "thrownExceptions": [],
 "rawCommentText": " @return The contents of the InputStream\n\n @throws RuntimeException if an IOException occurs.\n",
 "signature": "(com.surfapi.proc.ProcessHelper.Stream, java.io.InputStream)",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "The last 1000 lines of the InputStream.",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.loadStream",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "List",
  "dimension": "",
  "simpleTypeName": "List",
  "qualifiedTypeName": "java.util.List",
  "toString": "java.util.List<java.lang.String>"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [
  {
   "typeName": "IOException",
   "dimension": "",
   "simpleTypeName": "IOException",
   "qualifiedTypeName": "java.io.IOException",
   "toString": "java.io.IOException"
  }
 ],
 "commentText": "Read the contents of the given inputstream.\n \n Each line is passed to the output observers.\n \n The last 1000 lines are saved in a list and returned.",
 "firstSentenceTags": [
  {
   "text": "Read the contents of the given inputstream.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "loadStream",
 "modifierSpecifier": 4,
 "parameters": [
  {
   "typeName": "ProcessHelper.Stream",
   "name": "stream",
   "toString": "ProcessHelper.Stream stream",
   "annotations": [],
   "type": {
    "typeName": "ProcessHelper.Stream",
    "dimension": "",
    "simpleTypeName": "Stream",
    "qualifiedTypeName": "com.surfapi.proc.ProcessHelper.Stream",
    "toString": "com.surfapi.proc.ProcessHelper.Stream"
   }
  },
  {
   "typeName": "InputStream",
   "name": "is",
   "toString": "InputStream is",
   "annotations": [],
   "type": {
    "typeName": "InputStream",
    "dimension": "",
    "simpleTypeName": "InputStream",
    "qualifiedTypeName": "java.io.InputStream",
    "toString": "java.io.InputStream"
   }
  }
 ],
 "flatSignature": "(ProcessHelper.Stream, InputStream)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "protected",
 "thrownExceptions": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.io.IOException",
   "name": "IOException",
   "modifiers": "public",
   "metaType": "class"
  }
 ],
 "rawCommentText": " Read the contents of the given inputstream.\n \n Each line is passed to the output observers.\n \n The last 1000 lines are saved in a list and returned.\n\n @return The last 1000 lines of the InputStream.\n",
 "signature": "(com.surfapi.proc.ProcessHelper.Stream, java.io.InputStream)",
 "inlineTags": [
  {
   "text": "Read the contents of the given inputstream.\n \n Each line is passed to the output observers.\n \n The last 1000 lines are saved in a list and returned.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.notifyObservers",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "void",
  "dimension": "",
  "simpleTypeName": "void",
  "qualifiedTypeName": "void",
  "toString": "void"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "Notify output observers when a new line of output is read from the process's\n stdout or stderr streams.",
 "firstSentenceTags": [
  {
   "text": "Notify output observers when a new line of output is read from the process's\n stdout or stderr streams.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "notifyObservers",
 "modifierSpecifier": 4,
 "parameters": [
  {
   "typeName": "ProcessHelper.Stream",
   "name": "stream",
   "toString": "ProcessHelper.Stream stream",
   "annotations": [],
   "type": {
    "typeName": "ProcessHelper.Stream",
    "dimension": "",
    "simpleTypeName": "Stream",
    "qualifiedTypeName": "com.surfapi.proc.ProcessHelper.Stream",
    "toString": "com.surfapi.proc.ProcessHelper.Stream"
   }
  },
  {
   "typeName": "String",
   "name": "line",
   "toString": "String line",
   "annotations": [],
   "type": {
    "typeName": "String",
    "dimension": "",
    "simpleTypeName": "String",
    "qualifiedTypeName": "java.lang.String",
    "toString": "java.lang.String"
   }
  }
 ],
 "flatSignature": "(ProcessHelper.Stream, String)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "protected",
 "thrownExceptions": [],
 "rawCommentText": " Notify output observers when a new line of output is read from the process's\n stdout or stderr streams.\n",
 "signature": "(com.surfapi.proc.ProcessHelper.Stream, java.lang.String)",
 "inlineTags": [
  {
   "text": "Notify output observers when a new line of output is read from the process's\n stdout or stderr streams.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [
  {
   "text": "process - the already-started process.",
   "name": "@param",
   "kind": "@param"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper",
 "paramTags": [
  {
   "text": "process - the already-started process.",
   "parameterComment": "- the already-started process.",
   "name": "@param",
   "parameterName": "process",
   "kind": "@param"
  }
 ],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "isSynthetic": false,
 "metaType": "constructor",
 "thrownExceptionTypes": [],
 "commentText": "CTOR.",
 "firstSentenceTags": [
  {
   "text": "CTOR.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "ProcessHelper",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "Process",
   "name": "process",
   "toString": "Process process",
   "annotations": [],
   "type": {
    "typeName": "Process",
    "dimension": "",
    "simpleTypeName": "Process",
    "qualifiedTypeName": "java.lang.Process",
    "toString": "java.lang.Process"
   }
  }
 ],
 "flatSignature": "(Process)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " CTOR.  \n \n @param process - the already-started process.\n",
 "signature": "(java.lang.Process)",
 "inlineTags": [
  {
   "text": "CTOR.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "methods": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream.values",
   "name": "values",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public static",
   "returnType": {
    "typeName": "ProcessHelper.Stream",
    "dimension": "[]"
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream.valueOf",
   "name": "valueOf",
   "flatSignature": "(String)",
   "parameters": [
    {
     "toString": "String name"
    }
   ],
   "modifiers": "public static",
   "returnType": {
    "typeName": "ProcessHelper.Stream",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  }
 ],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "superclassType": {
  "typeName": "Enum",
  "dimension": "",
  "simpleTypeName": "Enum",
  "qualifiedTypeName": "java.lang.Enum",
  "toString": "java.lang.Enum<com.surfapi.proc.ProcessHelper.Stream>"
 },
 "commentText": "Output stream identifier",
 "seeTags": [],
 "name": "ProcessHelper.Stream",
 "qualifiedTypeName": "com.surfapi.proc.ProcessHelper.Stream",
 "interfaces": [],
 "modifiers": "public static final",
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A little wrapper around a forked Process.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper",
  "name": "ProcessHelper",
  "modifiers": "public",
  "metaType": "class"
 },
 "fields": [],
 "tags": [],
 "typeParameters": [],
 "simpleTypeName": "Stream",
 "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream",
 "innerClasses": [],
 "constructors": [],
 "metaType": "enum",
 "typeName": "ProcessHelper.Stream",
 "firstSentenceTags": [
  {
   "text": "Output stream identifier",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "interfaceTypes": [],
 "dimension": "",
 "typeParamTags": [],
 "superclass": {
  "firstSentenceTags": [],
  "qualifiedName": "java.lang.Enum",
  "name": "Enum",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "enumConstants": [
  {
   "constantValueExpression": null,
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream.STDOUT",
   "name": "STDOUT",
   "type": {
    "typeName": "ProcessHelper.Stream",
    "dimension": ""
   },
   "modifiers": "public static final",
   "metaType": "enumConstant"
  },
  {
   "constantValueExpression": null,
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream.STDERR",
   "name": "STDERR",
   "type": {
    "typeName": "ProcessHelper.Stream",
    "dimension": ""
   },
   "modifiers": "public static final",
   "metaType": "enumConstant"
  }
 ],
 "modifierSpecifier": 25,
 "toString": "com.surfapi.proc.ProcessHelper.Stream",
 "annotations": [],
 "rawCommentText": " Output stream identifier\n",
 "inlineTags": [
  {
   "text": "Output stream identifier",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream.values",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "ProcessHelper.Stream",
  "dimension": "[]",
  "simpleTypeName": "Stream",
  "qualifiedTypeName": "com.surfapi.proc.ProcessHelper.Stream",
  "toString": "com.surfapi.proc.ProcessHelper.Stream[]"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "values",
 "modifierSpecifier": 9,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "Output stream identifier",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream",
  "name": "ProcessHelper.Stream",
  "modifiers": "public static final",
  "metaType": "enum"
 },
 "modifiers": "public static",
 "thrownExceptions": [],
 "rawCommentText": "",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream.valueOf",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "ProcessHelper.Stream",
  "dimension": "",
  "simpleTypeName": "Stream",
  "qualifiedTypeName": "com.surfapi.proc.ProcessHelper.Stream",
  "toString": "com.surfapi.proc.ProcessHelper.Stream"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "valueOf",
 "modifierSpecifier": 9,
 "parameters": [
  {
   "typeName": "String",
   "name": "name",
   "toString": "String name",
   "annotations": [],
   "type": {
    "typeName": "String",
    "dimension": "",
    "simpleTypeName": "String",
    "qualifiedTypeName": "java.lang.String",
    "toString": "java.lang.String"
   }
  }
 ],
 "flatSignature": "(String)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "Output stream identifier",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream",
  "name": "ProcessHelper.Stream",
  "modifiers": "public static final",
  "metaType": "enum"
 },
 "modifiers": "public static",
 "thrownExceptions": [],
 "rawCommentText": "",
 "signature": "(java.lang.String)",
 "inlineTags": []
}
{
 "methods": [
  {
   "firstSentenceTags": [
    {
     "text": "Write the line to the printStream.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.StreamCollector.update",
   "name": "update",
   "flatSignature": "(Observable, Object)",
   "parameters": [
    {
     "toString": "Observable o"
    },
    {
     "toString": "Object line"
    }
   ],
   "modifiers": "public",
   "returnType": {
    "typeName": "void",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.StreamCollector.getOutput",
   "name": "getOutput",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "List",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  }
 ],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "superclassType": {
  "typeName": "Object",
  "dimension": "",
  "simpleTypeName": "Object",
  "qualifiedTypeName": "java.lang.Object",
  "toString": "java.lang.Object"
 },
 "commentText": "OutputObserver for ProcessHelper that logs the output via Log.log.",
 "seeTags": [],
 "name": "StreamCollector",
 "qualifiedTypeName": "com.surfapi.proc.StreamCollector",
 "interfaces": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.util.Observer",
   "name": "Observer",
   "modifiers": "public interface",
   "metaType": "interface"
  }
 ],
 "modifiers": "public",
 "containingClass": null,
 "fields": [],
 "tags": [],
 "typeParameters": [],
 "simpleTypeName": "StreamCollector",
 "qualifiedName": "com.surfapi.proc.StreamCollector",
 "innerClasses": [],
 "constructors": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.proc.StreamCollector",
   "name": "StreamCollector",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "metaType": "constructor",
   "thrownExceptionTypes": []
  }
 ],
 "metaType": "class",
 "typeName": "StreamCollector",
 "firstSentenceTags": [
  {
   "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "interfaceTypes": [
  {
   "typeName": "Observer",
   "dimension": "",
   "simpleTypeName": "Observer",
   "qualifiedTypeName": "java.util.Observer",
   "toString": "java.util.Observer"
  }
 ],
 "dimension": "",
 "typeParamTags": [],
 "superclass": {
  "firstSentenceTags": [],
  "qualifiedName": "java.lang.Object",
  "name": "Object",
  "modifiers": "public",
  "metaType": "class"
 },
 "enumConstants": [],
 "modifierSpecifier": 1,
 "toString": "com.surfapi.proc.StreamCollector",
 "annotations": [],
 "rawCommentText": " OutputObserver for ProcessHelper that logs the output via Log.log.\n",
 "inlineTags": [
  {
   "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.StreamCollector.update",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "void",
  "dimension": "",
  "simpleTypeName": "void",
  "qualifiedTypeName": "void",
  "toString": "void"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "Write the line to the printStream.",
 "firstSentenceTags": [
  {
   "text": "Write the line to the printStream.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "update",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "Observable",
   "name": "o",
   "toString": "Observable o",
   "annotations": [],
   "type": {
    "typeName": "Observable",
    "dimension": "",
    "simpleTypeName": "Observable",
    "qualifiedTypeName": "java.util.Observable",
    "toString": "java.util.Observable"
   }
  },
  {
   "typeName": "Object",
   "name": "line",
   "toString": "Object line",
   "annotations": [],
   "type": {
    "typeName": "Object",
    "dimension": "",
    "simpleTypeName": "Object",
    "qualifiedTypeName": "java.lang.Object",
    "toString": "java.lang.Object"
   }
  }
 ],
 "flatSignature": "(Observable, Object)",
 "annotations": [
  {
   "elementValues": [],
   "annotationType": {
    "firstSentenceTags": [],
    "qualifiedName": "java.lang.Override",
    "name": "Override",
    "modifiers": "public interface",
    "metaType": "annotationType"
   }
  }
 ],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.StreamCollector",
  "name": "StreamCollector",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " Write the line to the printStream.\n",
 "signature": "(java.util.Observable, java.lang.Object)",
 "inlineTags": [
  {
   "text": "Write the line to the printStream.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [
  {
   "text": "the collected output.",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.StreamCollector.getOutput",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "List",
  "dimension": "",
  "simpleTypeName": "List",
  "qualifiedTypeName": "java.util.List",
  "toString": "java.util.List<java.lang.String>"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "getOutput",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.StreamCollector",
  "name": "StreamCollector",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " @return the collected output.\n",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.StreamCollector",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "isSynthetic": false,
 "metaType": "constructor",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "StreamCollector",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.StreamCollector",
  "name": "StreamCollector",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": "",
 "signature": "()",
 "inlineTags": []
}
{
 "methods": [
  {
   "firstSentenceTags": [
    {
     "text": "Write the line to the printStream.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.StreamPiper.update",
   "name": "update",
   "flatSignature": "(Observable, Object)",
   "parameters": [
    {
     "toString": "Observable o"
    },
    {
     "toString": "Object line"
    }
   ],
   "modifiers": "public",
   "returnType": {
    "typeName": "void",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  }
 ],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "superclassType": {
  "typeName": "Object",
  "dimension": "",
  "simpleTypeName": "Object",
  "qualifiedTypeName": "java.lang.Object",
  "toString": "java.lang.Object"
 },
 "commentText": "OutputObserver for ProcessHelper that logs the output via Log.log.",
 "seeTags": [],
 "name": "StreamPiper",
 "qualifiedTypeName": "com.surfapi.proc.StreamPiper",
 "interfaces": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.util.Observer",
   "name": "Observer",
   "modifiers": "public interface",
   "metaType": "interface"
  }
 ],
 "modifiers": "public",
 "containingClass": null,
 "fields": [],
 "tags": [],
 "typeParameters": [],
 "simpleTypeName": "StreamPiper",
 "qualifiedName": "com.surfapi.proc.StreamPiper",
 "innerClasses": [],
 "constructors": [
  {
   "firstSentenceTags": [
    {
     "text": "CTOR.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.StreamPiper",
   "name": "StreamPiper",
   "flatSignature": "(OutputStream)",
   "parameters": [
    {
     "toString": "OutputStream outputStream"
    }
   ],
   "modifiers": "public",
   "metaType": "constructor",
   "thrownExceptionTypes": []
  }
 ],
 "metaType": "class",
 "typeName": "StreamPiper",
 "firstSentenceTags": [
  {
   "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "interfaceTypes": [
  {
   "typeName": "Observer",
   "dimension": "",
   "simpleTypeName": "Observer",
   "qualifiedTypeName": "java.util.Observer",
   "toString": "java.util.Observer"
  }
 ],
 "dimension": "",
 "typeParamTags": [],
 "superclass": {
  "firstSentenceTags": [],
  "qualifiedName": "java.lang.Object",
  "name": "Object",
  "modifiers": "public",
  "metaType": "class"
 },
 "enumConstants": [],
 "modifierSpecifier": 1,
 "toString": "com.surfapi.proc.StreamPiper",
 "annotations": [],
 "rawCommentText": " OutputObserver for ProcessHelper that logs the output via Log.log.\n",
 "inlineTags": [
  {
   "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.StreamPiper.update",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "void",
  "dimension": "",
  "simpleTypeName": "void",
  "qualifiedTypeName": "void",
  "toString": "void"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "Write the line to the printStream.",
 "firstSentenceTags": [
  {
   "text": "Write the line to the printStream.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "update",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "Observable",
   "name": "o",
   "toString": "Observable o",
   "annotations": [],
   "type": {
    "typeName": "Observable",
    "dimension": "",
    "simpleTypeName": "Observable",
    "qualifiedTypeName": "java.util.Observable",
    "toString": "java.util.Observable"
   }
  },
  {
   "typeName": "Object",
   "name": "line",
   "toString": "Object line",
   "annotations": [],
   "type": {
    "typeName": "Object",
    "dimension": "",
    "simpleTypeName": "Object",
    "qualifiedTypeName": "java.lang.Object",
    "toString": "java.lang.Object"
   }
  }
 ],
 "flatSignature": "(Observable, Object)",
 "annotations": [
  {
   "elementValues": [],
   "annotationType": {
    "firstSentenceTags": [],
    "qualifiedName": "java.lang.Override",
    "name": "Override",
    "modifiers": "public interface",
    "metaType": "annotationType"
   }
  }
 ],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.StreamPiper",
  "name": "StreamPiper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " Write the line to the printStream.\n",
 "signature": "(java.util.Observable, java.lang.Object)",
 "inlineTags": [
  {
   "text": "Write the line to the printStream.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.proc.StreamPiper",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [],
  "name": "com.surfapi.proc",
  "metaType": "package"
 },
 "isSynthetic": false,
 "metaType": "constructor",
 "thrownExceptionTypes": [],
 "commentText": "CTOR.",
 "firstSentenceTags": [
  {
   "text": "CTOR.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "StreamPiper",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "OutputStream",
   "name": "outputStream",
   "toString": "OutputStream outputStream",
   "annotations": [],
   "type": {
    "typeName": "OutputStream",
    "dimension": "",
    "simpleTypeName": "OutputStream",
    "qualifiedTypeName": "java.io.OutputStream",
    "toString": "java.io.OutputStream"
   }
  }
 ],
 "flatSignature": "(OutputStream)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.proc.StreamPiper",
  "name": "StreamPiper",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " CTOR.\n",
 "signature": "(java.io.OutputStream)",
 "inlineTags": [
  {
   "text": "CTOR.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "annotationTypes": [],
 "ordinaryClasses": [
  {
   "firstSentenceTags": [
    {
     "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.StreamPiper",
   "name": "StreamPiper",
   "modifiers": "public",
   "metaType": "class"
  },
  {
   "firstSentenceTags": [
    {
     "text": "OutputObserver for ProcessHelper that logs the output via Log.log.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.StreamCollector",
   "name": "StreamCollector",
   "modifiers": "public",
   "metaType": "class"
  },
  {
   "firstSentenceTags": [
    {
     "text": "A little wrapper around a forked Process.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper",
   "name": "ProcessHelper",
   "modifiers": "public",
   "metaType": "class"
  }
 ],
 "metaType": "package",
 "enums": [
  {
   "firstSentenceTags": [
    {
     "text": "Output stream identifier",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessHelper.Stream",
   "name": "ProcessHelper.Stream",
   "modifiers": "public static final",
   "metaType": "enum"
  }
 ],
 "exceptions": [
  {
   "firstSentenceTags": [
    {
     "text": "Contains info related to the javadoc process that failed.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.proc.ProcessException",
   "name": "ProcessException",
   "modifiers": "public",
   "metaType": "class"
  }
 ],
 "commentText": "",
 "firstSentenceTags": [],
 "errors": [],
 "seeTags": [],
 "name": "com.surfapi.proc",
 "interfaces": [],
 "annotations": [],
 "rawCommentText": "",
 "inlineTags": []
}
,{
 "methods": [],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "superclassType": null,
 "commentText": "DemoAnnotation is a custom annotation type.",
 "seeTags": [],
 "name": "DemoAnnotation",
 "qualifiedTypeName": "com.surfapi.test.DemoAnnotation",
 "interfaces": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.lang.annotation.Annotation",
   "name": "Annotation",
   "modifiers": "public interface",
   "metaType": "interface"
  }
 ],
 "modifiers": "public interface",
 "containingClass": null,
 "fields": [],
 "tags": [
  {
   "text": "Rob",
   "name": "@author",
   "kind": "@author"
  }
 ],
 "typeParameters": [],
 "simpleTypeName": "DemoAnnotation",
 "qualifiedName": "com.surfapi.test.DemoAnnotation",
 "innerClasses": [],
 "constructors": [],
 "metaType": "annotationType",
 "typeName": "DemoAnnotation",
 "firstSentenceTags": [
  {
   "text": "DemoAnnotation is a custom annotation type.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "interfaceTypes": [
  {
   "typeName": "Annotation",
   "dimension": "",
   "simpleTypeName": "Annotation",
   "qualifiedTypeName": "java.lang.annotation.Annotation",
   "toString": "java.lang.annotation.Annotation"
  }
 ],
 "dimension": "",
 "typeParamTags": [],
 "superclass": null,
 "enumConstants": [],
 "modifierSpecifier": 513,
 "toString": "com.surfapi.test.DemoAnnotation",
 "annotations": [],
 "rawCommentText": " DemoAnnotation is a custom annotation type.\n \n @author Rob\n",
 "inlineTags": [
  {
   "text": "DemoAnnotation is a custom annotation type.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "methods": [
  {
   "firstSentenceTags": [
    {
     "text": "This is an abstract method.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.someAbstractMethod",
   "name": "someAbstractMethod",
   "flatSignature": "(String[])",
   "parameters": [
    {
     "toString": "java.lang.String[] strs"
    }
   ],
   "modifiers": "public abstract",
   "returnType": {
    "typeName": "void",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [
    {
     "text": "This is a static method.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.someStaticMethod",
   "name": "someStaticMethod",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public static",
   "returnType": {
    "typeName": "int",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [
    {
     "text": "This is the first sentence of the javadoc description for method parse(URL).",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.parse",
   "name": "parse",
   "flatSignature": "(URL, List<T>)",
   "parameters": [
    {
     "toString": "URL url"
    },
    {
     "toString": "java.util.List<T> y"
    }
   ],
   "modifiers": "public",
   "returnType": {
    "typeName": "InputStream",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": [
    {
     "typeName": "IOException",
     "dimension": "",
     "simpleTypeName": "IOException",
     "qualifiedTypeName": "java.io.IOException",
     "toString": "java.io.IOException"
    },
    {
     "typeName": "IllegalArgumentException",
     "dimension": "",
     "simpleTypeName": "IllegalArgumentException",
     "qualifiedTypeName": "java.lang.IllegalArgumentException",
     "toString": "java.lang.IllegalArgumentException"
    }
   ]
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.methodWithTypes",
   "name": "methodWithTypes",
   "flatSignature": "(T[], E)",
   "parameters": [
    {
     "toString": "T[] classLevelType"
    },
    {
     "toString": "E methodLevelType"
    }
   ],
   "modifiers": "public",
   "returnType": {
    "typeName": "E",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  },
  {
   "firstSentenceTags": [
    {
     "text": "",
     "name": "Text",
     "kind": "Text"
    },
    {
     "text": "",
     "name": "@inheritDoc",
     "kind": "@inheritDoc"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.call",
   "name": "call",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "String",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": [
    {
     "typeName": "Exception",
     "dimension": "",
     "simpleTypeName": "Exception",
     "qualifiedTypeName": "java.lang.Exception",
     "toString": "java.lang.Exception"
    }
   ]
  }
 ],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "superclassType": {
  "typeName": "Object",
  "dimension": "",
  "simpleTypeName": "Object",
  "qualifiedTypeName": "java.lang.Object",
  "toString": "java.lang.Object"
 },
 "commentText": "A test file used for parsing its javadoc comments.\n\n This file was copied from {@link it.sauronsoftware.feed4j.FeedParser FeedParser}.",
 "seeTags": [
  {
   "text": "<a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/technotes\/tools\/windows\/javadoc.html#link\">Javadoc Reference Guide<\/a>",
   "name": "@see",
   "kind": "@see"
  },
  {
   "text": "com.surfapi.javadoc.JsonDoclet",
   "name": "@see",
   "kind": "@see"
  },
  {
   "text": "java.net.URL#equals The URL.equals method",
   "name": "@see",
   "kind": "@see"
  }
 ],
 "name": "DemoJavadoc",
 "qualifiedTypeName": "com.surfapi.test.DemoJavadoc",
 "interfaces": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.util.concurrent.Callable",
   "name": "Callable",
   "modifiers": "public interface",
   "metaType": "interface"
  }
 ],
 "modifiers": "public abstract",
 "containingClass": null,
 "fields": [
  {
   "constantValueExpression": null,
   "firstSentenceTags": [
    {
     "text": "A protected member String array.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.y",
   "name": "y",
   "type": {
    "typeName": "String",
    "dimension": "[]"
   },
   "modifiers": "protected transient volatile",
   "metaType": "field"
  },
  {
   "constantValueExpression": "\"ZZZ\"",
   "firstSentenceTags": [
    {
     "text": "A static final member named z.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.z",
   "name": "z",
   "type": {
    "typeName": "String",
    "dimension": ""
   },
   "modifiers": "public static final",
   "metaType": "field"
  }
 ],
 "tags": [
  {
   "text": "<T> A generic type parm T, extends List",
   "name": "@param",
   "kind": "@param"
  },
  {
   "text": "Rob Alderman",
   "name": "@author",
   "kind": "@author"
  },
  {
   "text": "1.0",
   "name": "@since",
   "kind": "@since"
  },
  {
   "text": "1.0",
   "name": "@version",
   "kind": "@version"
  },
  {
   "text": "<a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/technotes\/tools\/windows\/javadoc.html#link\">Javadoc Reference Guide<\/a>",
   "name": "@see",
   "kind": "@see"
  },
  {
   "text": "com.surfapi.javadoc.JsonDoclet",
   "name": "@see",
   "kind": "@see"
  },
  {
   "text": "java.net.URL#equals The URL.equals method",
   "name": "@see",
   "kind": "@see"
  }
 ],
 "typeParameters": [
  {
   "bounds": [
    {
     "typeName": "List",
     "dimension": "",
     "simpleTypeName": "List",
     "qualifiedTypeName": "java.util.List",
     "toString": "java.util.List"
    }
   ],
   "typeName": "T",
   "dimension": "",
   "simpleTypeName": "T",
   "qualifiedTypeName": "T",
   "toString": "T extends java.util.List"
  }
 ],
 "simpleTypeName": "DemoJavadoc",
 "qualifiedName": "com.surfapi.test.DemoJavadoc",
 "innerClasses": [
  {
   "firstSentenceTags": [
    {
     "text": "Javadoc for non-static inner class.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.NonStaticInnerClass",
   "name": "DemoJavadoc.NonStaticInnerClass",
   "modifiers": "public",
   "metaType": "class"
  },
  {
   "firstSentenceTags": [
    {
     "text": "Javadoc for static inner class.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.StaticInnerClass",
   "name": "DemoJavadoc.StaticInnerClass",
   "modifiers": "public static",
   "metaType": "class"
  }
 ],
 "constructors": [
  {
   "firstSentenceTags": [
    {
     "text": "CTOR.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc",
   "name": "DemoJavadoc",
   "flatSignature": "(String)",
   "parameters": [
    {
     "toString": "String b"
    }
   ],
   "modifiers": "public",
   "metaType": "constructor",
   "thrownExceptionTypes": []
  }
 ],
 "metaType": "class",
 "typeName": "DemoJavadoc",
 "firstSentenceTags": [
  {
   "text": "A test file used for parsing its javadoc comments.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "interfaceTypes": [
  {
   "typeName": "Callable",
   "dimension": "",
   "simpleTypeName": "Callable",
   "qualifiedTypeName": "java.util.concurrent.Callable",
   "toString": "java.util.concurrent.Callable<java.lang.String>"
  }
 ],
 "dimension": "",
 "typeParamTags": [
  {
   "text": "<T> A generic type parm T, extends List",
   "parameterComment": "A generic type parm T, extends List",
   "name": "@param",
   "parameterName": "T",
   "kind": "@param"
  }
 ],
 "superclass": {
  "firstSentenceTags": [],
  "qualifiedName": "java.lang.Object",
  "name": "Object",
  "modifiers": "public",
  "metaType": "class"
 },
 "enumConstants": [],
 "modifierSpecifier": 1025,
 "toString": "com.surfapi.test.DemoJavadoc<T extends java.util.List>",
 "annotations": [
  {
   "elementValues": [],
   "annotationType": {
    "firstSentenceTags": [
     {
      "text": "DemoAnnotation is a custom annotation type.",
      "name": "Text",
      "kind": "Text"
     }
    ],
    "qualifiedName": "com.surfapi.test.DemoAnnotation",
    "name": "DemoAnnotation",
    "modifiers": "public interface",
    "metaType": "annotationType"
   }
  }
 ],
 "rawCommentText": " A test file used for parsing its javadoc comments.\n\n This file was copied from {@link it.sauronsoftware.feed4j.FeedParser FeedParser}.\n \n @param <T> A generic type parm T, extends List\n \n @author Rob Alderman\n @since 1.0\n @version 1.0\n\n @see <a href=\"http:\/\/docs.oracle.com\/javase\/7\/docs\/technotes\/tools\/windows\/javadoc.html#link\">Javadoc Reference Guide<\/a>\n @see com.surfapi.javadoc.JsonDoclet\n @see java.net.URL#equals The URL.equals method\n\n",
 "inlineTags": [
  {
   "text": "A test file used for parsing its javadoc comments.\n\n This file was copied from ",
   "name": "Text",
   "kind": "Text"
  },
  {
   "text": "it.sauronsoftware.feed4j.FeedParser FeedParser",
   "name": "@link",
   "kind": "@see"
  },
  {
   "text": ".",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.test.DemoJavadoc.someAbstractMethod",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "void",
  "dimension": "",
  "simpleTypeName": "void",
  "qualifiedTypeName": "void",
  "toString": "void"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "This is an abstract method.",
 "firstSentenceTags": [
  {
   "text": "This is an abstract method.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "someAbstractMethod",
 "modifierSpecifier": 1025,
 "parameters": [
  {
   "typeName": "java.lang.String[]",
   "name": "strs",
   "toString": "java.lang.String[] strs",
   "annotations": [],
   "type": {
    "typeName": "String",
    "dimension": "[]",
    "simpleTypeName": "String",
    "qualifiedTypeName": "java.lang.String",
    "toString": "java.lang.String[]"
   }
  }
 ],
 "flatSignature": "(String[])",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A test file used for parsing its javadoc comments.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc",
  "name": "DemoJavadoc",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "modifiers": "public abstract",
 "thrownExceptions": [],
 "rawCommentText": " This is an abstract method.\n",
 "signature": "(java.lang.String[])",
 "inlineTags": [
  {
   "text": "This is an abstract method.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.test.DemoJavadoc.someStaticMethod",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "int",
  "dimension": "",
  "simpleTypeName": "int",
  "qualifiedTypeName": "int",
  "toString": "int"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "This is a static method.",
 "firstSentenceTags": [
  {
   "text": "This is a static method.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "someStaticMethod",
 "modifierSpecifier": 9,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A test file used for parsing its javadoc comments.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc",
  "name": "DemoJavadoc",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "modifiers": "public static",
 "thrownExceptions": [],
 "rawCommentText": " This is a static method.\n",
 "signature": "()",
 "inlineTags": [
  {
   "text": "This is a static method.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [
  {
   "text": "url   The first parm is a feed URL.\n              The description for the url parm has two lines.",
   "name": "@param",
   "kind": "@param"
  },
  {
   "text": "y     An List param named y.",
   "name": "@param",
   "kind": "@param"
  },
  {
   "text": "An input stream for the feed.",
   "name": "@return",
   "kind": "@return"
  },
  {
   "text": "IOException\n             I\/O error during conetnts retrieving.",
   "name": "@throws",
   "kind": "@throws"
  },
  {
   "text": "IllegalArgumentException\n             The document retrieved is not valid XML.",
   "name": "@throws",
   "kind": "@throws"
  },
  {
   "text": "",
   "name": "@deprecated",
   "kind": "@deprecated"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.test.DemoJavadoc.parse",
 "paramTags": [
  {
   "text": "url   The first parm is a feed URL.\n              The description for the url parm has two lines.",
   "parameterComment": "The first parm is a feed URL.\n              The description for the url parm has two lines.",
   "name": "@param",
   "parameterName": "url",
   "kind": "@param"
  },
  {
   "text": "y     An List param named y.",
   "parameterComment": "An List param named y.",
   "name": "@param",
   "parameterName": "y",
   "kind": "@param"
  }
 ],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "InputStream",
  "dimension": "",
  "simpleTypeName": "InputStream",
  "qualifiedTypeName": "java.io.InputStream",
  "toString": "java.io.InputStream"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [
  {
   "typeName": "IOException",
   "dimension": "",
   "simpleTypeName": "IOException",
   "qualifiedTypeName": "java.io.IOException",
   "toString": "java.io.IOException"
  },
  {
   "typeName": "IllegalArgumentException",
   "dimension": "",
   "simpleTypeName": "IllegalArgumentException",
   "qualifiedTypeName": "java.lang.IllegalArgumentException",
   "toString": "java.lang.IllegalArgumentException"
  }
 ],
 "commentText": "This is the first sentence of the javadoc description for method parse(URL).\n This is the second sentence of the javadoc. For more\n info on URLs go {@link java.net.URL here}.  How about a 4th sentence?",
 "firstSentenceTags": [
  {
   "text": "This is the first sentence of the javadoc description for method parse(URL).",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "parse",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "URL",
   "name": "url",
   "toString": "URL url",
   "annotations": [],
   "type": {
    "typeName": "URL",
    "dimension": "",
    "simpleTypeName": "URL",
    "qualifiedTypeName": "java.net.URL",
    "toString": "java.net.URL"
   }
  },
  {
   "typeName": "java.util.List<T>",
   "name": "y",
   "toString": "java.util.List<T> y",
   "annotations": [],
   "type": {
    "typeName": "List",
    "dimension": "",
    "simpleTypeName": "List",
    "qualifiedTypeName": "java.util.List",
    "toString": "java.util.List<T>"
   }
  }
 ],
 "flatSignature": "(URL, List<T>)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A test file used for parsing its javadoc comments.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc",
  "name": "DemoJavadoc",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.io.IOException",
   "name": "IOException",
   "modifiers": "public",
   "metaType": "class"
  },
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.lang.IllegalArgumentException",
   "name": "IllegalArgumentException",
   "modifiers": "public",
   "metaType": "class"
  }
 ],
 "rawCommentText": " This is the first sentence of the javadoc description for method parse(URL).\n This is the second sentence of the javadoc. For more\n info on URLs go {@link java.net.URL here}.  How about a 4th sentence? \n \n @param url   The first parm is a feed URL.\n              The description for the url parm has two lines.\n @param y     An List param named y.\n             \n @return An input stream for the feed.\n \n @throws IOException\n             I\/O error during conetnts retrieving.\n @throws IllegalArgumentException\n             The document retrieved is not valid XML.\n\n @deprecated\n",
 "signature": "(java.net.URL, java.util.List<T>)",
 "inlineTags": [
  {
   "text": "This is the first sentence of the javadoc description for method parse(URL).\n This is the second sentence of the javadoc. For more\n info on URLs go ",
   "name": "Text",
   "kind": "Text"
  },
  {
   "text": "java.net.URL here",
   "name": "@link",
   "kind": "@see"
  },
  {
   "text": ".  How about a 4th sentence?",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [
  {
   "text": "classLevelType Is of the class-level generic type T.",
   "name": "@param",
   "kind": "@param"
  },
  {
   "text": "methodLevelType Is of the method-level generic type E.",
   "name": "@param",
   "kind": "@param"
  },
  {
   "text": "<E> A generic type parm E",
   "name": "@param",
   "kind": "@param"
  },
  {
   "text": "E some object of type E",
   "name": "@return",
   "kind": "@return"
  }
 ],
 "typeParameters": [
  {
   "bounds": [],
   "typeName": "E",
   "dimension": "",
   "simpleTypeName": "E",
   "qualifiedTypeName": "E",
   "toString": "E"
  }
 ],
 "qualifiedName": "com.surfapi.test.DemoJavadoc.methodWithTypes",
 "paramTags": [
  {
   "text": "classLevelType Is of the class-level generic type T.",
   "parameterComment": "Is of the class-level generic type T.",
   "name": "@param",
   "parameterName": "classLevelType",
   "kind": "@param"
  },
  {
   "text": "methodLevelType Is of the method-level generic type E.",
   "parameterComment": "Is of the method-level generic type E.",
   "name": "@param",
   "parameterName": "methodLevelType",
   "kind": "@param"
  }
 ],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "E",
  "dimension": "",
  "simpleTypeName": "E",
  "qualifiedTypeName": "E",
  "toString": "E"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [
  {
   "text": "<E> A generic type parm E",
   "parameterComment": "A generic type parm E",
   "name": "@param",
   "parameterName": "E",
   "kind": "@param"
  }
 ],
 "seeTags": [],
 "name": "methodWithTypes",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "T[]",
   "name": "classLevelType",
   "toString": "T[] classLevelType",
   "annotations": [],
   "type": {
    "typeName": "T",
    "dimension": "[]",
    "simpleTypeName": "T",
    "qualifiedTypeName": "T",
    "toString": "T[]"
   }
  },
  {
   "typeName": "E",
   "name": "methodLevelType",
   "toString": "E methodLevelType",
   "annotations": [],
   "type": {
    "typeName": "E",
    "dimension": "",
    "simpleTypeName": "E",
    "qualifiedTypeName": "E",
    "toString": "E"
   }
  }
 ],
 "flatSignature": "(T[], E)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A test file used for parsing its javadoc comments.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc",
  "name": "DemoJavadoc",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " @param classLevelType Is of the class-level generic type T.\n @param methodLevelType Is of the method-level generic type E.\n @param <E> A generic type parm E\n \n @return E some object of type E\n",
 "signature": "(T[], E)",
 "inlineTags": []
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.test.DemoJavadoc.call",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "String",
  "dimension": "",
  "simpleTypeName": "String",
  "qualifiedTypeName": "java.lang.String",
  "toString": "java.lang.String"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [
  {
   "typeName": "Exception",
   "dimension": "",
   "simpleTypeName": "Exception",
   "qualifiedTypeName": "java.lang.Exception",
   "toString": "java.lang.Exception"
  }
 ],
 "commentText": "{@inheritDoc}",
 "firstSentenceTags": [
  {
   "text": "",
   "name": "Text",
   "kind": "Text"
  },
  {
   "text": "",
   "name": "@inheritDoc",
   "kind": "@inheritDoc"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "call",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [
  {
   "elementValues": [],
   "annotationType": {
    "firstSentenceTags": [],
    "qualifiedName": "java.lang.Override",
    "name": "Override",
    "modifiers": "public interface",
    "metaType": "annotationType"
   }
  }
 ],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A test file used for parsing its javadoc comments.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc",
  "name": "DemoJavadoc",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "java.lang.Exception",
   "name": "Exception",
   "modifiers": "public",
   "metaType": "class"
  }
 ],
 "rawCommentText": " {@inheritDoc}\n",
 "signature": "()",
 "inlineTags": [
  {
   "text": "",
   "name": "Text",
   "kind": "Text"
  },
  {
   "text": "",
   "name": "@inheritDoc",
   "kind": "@inheritDoc"
  }
 ]
}
{
 "tags": [
  {
   "text": "b     Some {@link java.lang.String String} parameter named b.",
   "name": "@param",
   "kind": "@param"
  }
 ],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.test.DemoJavadoc",
 "paramTags": [
  {
   "text": "b     Some {@link java.lang.String String} parameter named b.",
   "parameterComment": "Some {@link java.lang.String String} parameter named b.",
   "name": "@param",
   "parameterName": "b",
   "kind": "@param"
  }
 ],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "isSynthetic": false,
 "metaType": "constructor",
 "thrownExceptionTypes": [],
 "commentText": "CTOR.",
 "firstSentenceTags": [
  {
   "text": "CTOR.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "DemoJavadoc",
 "modifierSpecifier": 1,
 "parameters": [
  {
   "typeName": "String",
   "name": "b",
   "toString": "String b",
   "annotations": [],
   "type": {
    "typeName": "String",
    "dimension": "",
    "simpleTypeName": "String",
    "qualifiedTypeName": "java.lang.String",
    "toString": "java.lang.String"
   }
  }
 ],
 "flatSignature": "(String)",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A test file used for parsing its javadoc comments.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc",
  "name": "DemoJavadoc",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " CTOR.\n \n @param b     Some {@link java.lang.String String} parameter named b. \n",
 "signature": "(java.lang.String)",
 "inlineTags": [
  {
   "text": "CTOR.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "qualifiedName": "com.surfapi.test.DemoJavadoc.y",
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "type": {
  "typeName": "String",
  "dimension": "[]",
  "simpleTypeName": "String",
  "qualifiedTypeName": "java.lang.String",
  "toString": "java.lang.String[]"
 },
 "serialFieldTags": [],
 "isSynthetic": false,
 "metaType": "field",
 "constantValue": null,
 "constantValueExpression": null,
 "commentText": "A protected member String array.",
 "firstSentenceTags": [
  {
   "text": "A protected member String array.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "seeTags": [],
 "name": "y",
 "modifierSpecifier": 196,
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A test file used for parsing its javadoc comments.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc",
  "name": "DemoJavadoc",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "modifiers": "protected transient volatile",
 "rawCommentText": " A protected member String array.\n",
 "inlineTags": [
  {
   "text": "A protected member String array.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "qualifiedName": "com.surfapi.test.DemoJavadoc.z",
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "type": {
  "typeName": "String",
  "dimension": "",
  "simpleTypeName": "String",
  "qualifiedTypeName": "java.lang.String",
  "toString": "java.lang.String"
 },
 "serialFieldTags": [],
 "isSynthetic": false,
 "metaType": "field",
 "constantValue": "ZZZ",
 "constantValueExpression": "\"ZZZ\"",
 "commentText": "A static final member named z.",
 "firstSentenceTags": [
  {
   "text": "A static final member named z.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "seeTags": [],
 "name": "z",
 "modifierSpecifier": 25,
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A test file used for parsing its javadoc comments.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc",
  "name": "DemoJavadoc",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "modifiers": "public static final",
 "rawCommentText": " A static final member named z.\n",
 "inlineTags": [
  {
   "text": "A static final member named z.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "methods": [
  {
   "firstSentenceTags": [
    {
     "text": "This here is a method within the inner class, the non-static one.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.NonStaticInnerClass.innerClassMethodBlah",
   "name": "innerClassMethodBlah",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "returnType": {
    "typeName": "void",
    "dimension": ""
   },
   "metaType": "method",
   "thrownExceptionTypes": []
  }
 ],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "superclassType": {
  "typeName": "Object",
  "dimension": "",
  "simpleTypeName": "Object",
  "qualifiedTypeName": "java.lang.Object",
  "toString": "java.lang.Object"
 },
 "commentText": "Javadoc for non-static inner class.",
 "seeTags": [],
 "name": "DemoJavadoc.NonStaticInnerClass",
 "qualifiedTypeName": "com.surfapi.test.DemoJavadoc.NonStaticInnerClass",
 "interfaces": [],
 "modifiers": "public",
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A test file used for parsing its javadoc comments.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc",
  "name": "DemoJavadoc",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "fields": [],
 "tags": [],
 "typeParameters": [],
 "simpleTypeName": "NonStaticInnerClass",
 "qualifiedName": "com.surfapi.test.DemoJavadoc.NonStaticInnerClass",
 "innerClasses": [],
 "constructors": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.NonStaticInnerClass",
   "name": "DemoJavadoc.NonStaticInnerClass",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "metaType": "constructor",
   "thrownExceptionTypes": []
  }
 ],
 "metaType": "class",
 "typeName": "DemoJavadoc.NonStaticInnerClass",
 "firstSentenceTags": [
  {
   "text": "Javadoc for non-static inner class.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "interfaceTypes": [],
 "dimension": "",
 "typeParamTags": [],
 "superclass": {
  "firstSentenceTags": [],
  "qualifiedName": "java.lang.Object",
  "name": "Object",
  "modifiers": "public",
  "metaType": "class"
 },
 "enumConstants": [],
 "modifierSpecifier": 1,
 "toString": "com.surfapi.test.DemoJavadoc<T extends java.util.List>.NonStaticInnerClass",
 "annotations": [],
 "rawCommentText": " Javadoc for non-static inner class.\n",
 "inlineTags": [
  {
   "text": "Javadoc for non-static inner class.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.test.DemoJavadoc.NonStaticInnerClass.innerClassMethodBlah",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "returnType": {
  "typeName": "void",
  "dimension": "",
  "simpleTypeName": "void",
  "qualifiedTypeName": "void",
  "toString": "void"
 },
 "isSynthetic": false,
 "metaType": "method",
 "thrownExceptionTypes": [],
 "commentText": "This here is a method within the inner class, the non-static one.",
 "firstSentenceTags": [
  {
   "text": "This here is a method within the inner class, the non-static one.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "typeParamTags": [],
 "seeTags": [],
 "name": "innerClassMethodBlah",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for non-static inner class.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc.NonStaticInnerClass",
  "name": "DemoJavadoc.NonStaticInnerClass",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": " This here is a method within the inner class, the non-static one.\n",
 "signature": "()",
 "inlineTags": [
  {
   "text": "This here is a method within the inner class, the non-static one.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.test.DemoJavadoc.NonStaticInnerClass",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "isSynthetic": false,
 "metaType": "constructor",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "DemoJavadoc.NonStaticInnerClass",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for non-static inner class.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc.NonStaticInnerClass",
  "name": "DemoJavadoc.NonStaticInnerClass",
  "modifiers": "public",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": "",
 "signature": "()",
 "inlineTags": []
}
{
 "methods": [],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "superclassType": {
  "typeName": "Object",
  "dimension": "",
  "simpleTypeName": "Object",
  "qualifiedTypeName": "java.lang.Object",
  "toString": "java.lang.Object"
 },
 "commentText": "Javadoc for static inner class.",
 "seeTags": [],
 "name": "DemoJavadoc.StaticInnerClass",
 "qualifiedTypeName": "com.surfapi.test.DemoJavadoc.StaticInnerClass",
 "interfaces": [],
 "modifiers": "public static",
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "A test file used for parsing its javadoc comments.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc",
  "name": "DemoJavadoc",
  "modifiers": "public abstract",
  "metaType": "class"
 },
 "fields": [],
 "tags": [],
 "typeParameters": [],
 "simpleTypeName": "StaticInnerClass",
 "qualifiedName": "com.surfapi.test.DemoJavadoc.StaticInnerClass",
 "innerClasses": [],
 "constructors": [
  {
   "firstSentenceTags": [],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.StaticInnerClass",
   "name": "DemoJavadoc.StaticInnerClass",
   "flatSignature": "()",
   "parameters": [],
   "modifiers": "public",
   "metaType": "constructor",
   "thrownExceptionTypes": []
  }
 ],
 "metaType": "class",
 "typeName": "DemoJavadoc.StaticInnerClass",
 "firstSentenceTags": [
  {
   "text": "Javadoc for static inner class.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "interfaceTypes": [],
 "dimension": "",
 "typeParamTags": [],
 "superclass": {
  "firstSentenceTags": [],
  "qualifiedName": "java.lang.Object",
  "name": "Object",
  "modifiers": "public",
  "metaType": "class"
 },
 "enumConstants": [],
 "modifierSpecifier": 9,
 "toString": "com.surfapi.test.DemoJavadoc.StaticInnerClass",
 "annotations": [],
 "rawCommentText": " Javadoc for static inner class.\n",
 "inlineTags": [
  {
   "text": "Javadoc for static inner class.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}
{
 "tags": [],
 "typeParameters": [],
 "qualifiedName": "com.surfapi.test.DemoJavadoc.StaticInnerClass",
 "paramTags": [],
 "containingPackage": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for the package, from package-info.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "name": "com.surfapi.test",
  "metaType": "package"
 },
 "isSynthetic": false,
 "metaType": "constructor",
 "thrownExceptionTypes": [],
 "commentText": "",
 "firstSentenceTags": [],
 "typeParamTags": [],
 "seeTags": [],
 "name": "DemoJavadoc.StaticInnerClass",
 "modifierSpecifier": 1,
 "parameters": [],
 "flatSignature": "()",
 "annotations": [],
 "containingClass": {
  "firstSentenceTags": [
   {
    "text": "Javadoc for static inner class.",
    "name": "Text",
    "kind": "Text"
   }
  ],
  "qualifiedName": "com.surfapi.test.DemoJavadoc.StaticInnerClass",
  "name": "DemoJavadoc.StaticInnerClass",
  "modifiers": "public static",
  "metaType": "class"
 },
 "modifiers": "public",
 "thrownExceptions": [],
 "rawCommentText": "",
 "signature": "()",
 "inlineTags": []
}
{
 "tags": [
  {
   "text": "Rob Alderman",
   "name": "@author",
   "kind": "@author"
  },
  {
   "text": "1.x",
   "name": "@since",
   "kind": "@since"
  }
 ],
 "annotationTypes": [
  {
   "firstSentenceTags": [
    {
     "text": "DemoAnnotation is a custom annotation type.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoAnnotation",
   "name": "DemoAnnotation",
   "modifiers": "public interface",
   "metaType": "annotationType"
  }
 ],
 "ordinaryClasses": [
  {
   "firstSentenceTags": [
    {
     "text": "A test file used for parsing its javadoc comments.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc",
   "name": "DemoJavadoc",
   "modifiers": "public abstract",
   "metaType": "class"
  },
  {
   "firstSentenceTags": [
    {
     "text": "Javadoc for non-static inner class.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.NonStaticInnerClass",
   "name": "DemoJavadoc.NonStaticInnerClass",
   "modifiers": "public",
   "metaType": "class"
  },
  {
   "firstSentenceTags": [
    {
     "text": "Javadoc for static inner class.",
     "name": "Text",
     "kind": "Text"
    }
   ],
   "qualifiedName": "com.surfapi.test.DemoJavadoc.StaticInnerClass",
   "name": "DemoJavadoc.StaticInnerClass",
   "modifiers": "public static",
   "metaType": "class"
  }
 ],
 "metaType": "package",
 "enums": [],
 "exceptions": [],
 "commentText": "Javadoc for the package, from package-info.",
 "firstSentenceTags": [
  {
   "text": "Javadoc for the package, from package-info.",
   "name": "Text",
   "kind": "Text"
  }
 ],
 "errors": [],
 "seeTags": [],
 "name": "com.surfapi.test",
 "interfaces": [],
 "annotations": [],
 "rawCommentText": "\n Javadoc for the package, from package-info.\n\n @author Rob Alderman\n @since 1.x\n",
 "inlineTags": [
  {
   "text": "Javadoc for the package, from package-info.",
   "name": "Text",
   "kind": "Text"
  }
 ]
}

]